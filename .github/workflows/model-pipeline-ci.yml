name: MLOps project CI/CD Pipeline

on:
  push:
    branches: [ main, feature-ci-run ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging

env:
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.12'
  CACHE_KEY: ${{ github.sha }}
  DVC_REMOTE_NAME: origin
  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}

jobs:
  run-pipeline-and-test:
    name: Install dependencies, run pipeline and test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 mypy

      - name: Ingest the data and run ML pipeline
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python3 src/data/make_dataset.py
          dvc repro

      # - name: Lint with flake8
      #   run: |
      #     flake8 src tests

      # - name: Type checking with mypy
      #   run: |
      #     mypy src

      - name: Test with pytest
        run: |
          pytest -vs --cov=src --cov-report=xml:coverage.xml tests/
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload test coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          if-no-files-found: warn  # This is actually the default, but making it explicit

  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: run-pipeline-and-test
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Install security tools
  #       run: |
  #         pip install bandit safety

  #     - name: Run Bandit security scan
  #       run: |
  #         bandit -r src/ -f json -o bandit-results.json

  #     - name: Check for dependency vulnerabilities
  #       run: |
  #         safety check -r requirements.txt

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: 'fs'
  #         format: 'table'
  #         output: 'trivy-results.txt'
  #         severity: 'CRITICAL,HIGH'

  #     - name: Upload security scan results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: security-scan-results
  #         path: |
  #           bandit-results.json
  #           trivy-results.txt

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [run-pipeline-and-test]          # TODO later: security-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Release Tag
        id: vars
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          RELEASE_TAG="${BRANCH_NAME}-${GITHUB_SHA::6}-$(date +'%Y%m%d')"
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "json={\"date\":\"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"}" >> $GITHUB_OUTPUT

      - name: Set lowercase image name
        run: |
          REPO_NAME_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=${REPO_NAME_LOWERCASE}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.RELEASE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.vars.outputs.json).date }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.vars.outputs.RELEASE_TAG }}

      # Temporary fix for cache: https://github.com/docker/build-push-action/issues/252
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # deploy:
  #   name: Deploy to Environment
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.event_name != 'pull_request'
  #   environment:
  #     name: ${{ github.event.inputs.environment || 'staging' }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Install DVC
  #       run: |
  #         pip install dvc dvc[s3]

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Pull DVC data
  #       run: |
  #         dvc pull -r ${{ env.DVC_REMOTE_NAME }}

  #     - name: Deploy to environment
  #       run: |
  #         echo "Deploying to ${{ github.event.inputs.environment || 'staging' }}"
  #         # Add your deployment scripts or commands here
  #         # For example, using kubectl to deploy to Kubernetes
  #         # kubectl apply -f k8s/${{ github.event.inputs.environment || 'staging' }}/deployment.yaml